#pragma once
#include <cstdint>
#include <cstddef>
#include <string>
#include <array>
#include <chrono>
#include <tuple>

#ifdef _WIN32
#include <intrin.h>
#define NOMINMAX
#include <Windows.h>
// Statically enables "ENABLE_VIRTUAL_TERMINAL_PROCESSING" for the terminal
// at runtime to allow for unix-style escape sequences. 
static const bool _WndV100Enabled = []() -> bool
{
	const auto Handle = GetStdHandle(STD_OUTPUT_HANDLE);
	DWORD ConsoleMode;
	GetConsoleMode(
		Handle,
		&ConsoleMode
	);
	SetConsoleMode(
		Handle,
		ConsoleMode | ENABLE_VIRTUAL_TERMINAL_PROCESSING
	);
	GetConsoleMode(
		Handle,
		&ConsoleMode
	);
	return ConsoleMode & ENABLE_VIRTUAL_TERMINAL_PROCESSING;
}();


std::string GetProcessorBrandString()
{
	std::string Model;
	Model.reserve(48);

	for( std::uint32_t i = 0x80000002; i < 0x80000005; ++i )
	{
		std::array<std::uint32_t, 4> CPUData;
		__cpuid(
			reinterpret_cast<int*>(&CPUData[0]),
			i
		);
		for( const std::uint32_t& Word : CPUData )
		{
			Model.append(
				reinterpret_cast<const char*>(&Word),
				4
			);
		}
	}

	return Model;
}
#else
#include <cpuid.h>
std::string GetProcessorBrandString()
{
	std::string Model;
	Model.reserve(48);

	for( std::size_t i = 0x80000002; i < 0x80000005; ++i )
	{
		std::array<std::uint32_t, 4> CPUData;
		__get_cpuid(
			i,
			&CPUData[0], &CPUData[1],
			&CPUData[2], &CPUData[3]
		);
		for( const std::uint32_t& Word : CPUData )
		{
			Model.append(
				reinterpret_cast<const char*>(&Word),
				4
			);
		}
	}

	return Model;
}

#endif

template< typename TimeT = std::chrono::nanoseconds >
struct Bench
{

	// Returns a tuple of (Time, Function return value)
	template< typename FunctionT, typename ...ArgsT >
	static std::tuple<
		TimeT,
		typename std::result_of<FunctionT(ArgsT...)>::type
	> BenchResult(
		FunctionT&& Func,
		ArgsT&&... Arguments
	)
	{
		const auto Start = std::chrono::high_resolution_clock::now();

		typename std::result_of<FunctionT(ArgsT...)>::type ReturnValue = std::forward<FunctionT>(Func)(
			std::forward<ArgsT>(Arguments)...
		);
		const auto Stop = std::chrono::high_resolution_clock::now();

		return std::make_tuple<
			TimeT,
			typename std::result_of<FunctionT(ArgsT...)>::type
		>(
			std::chrono::duration_cast<TimeT>(
				Stop - Start
				),
			std::move(ReturnValue)
		);
	}
};

const static std::uint64_t FibMod64[] = {
0U,
1U,
1U,
2U,
3U,
5U,
8U,
13U,
21U,
34U,
55U,
89U,
144U,
233U,
377U,
610U,
987U,
1597U,
2584U,
4181U,
6765U,
10946U,
17711U,
28657U,
46368U,
75025U,
121393U,
196418U,
317811U,
514229U,
832040U,
1346269U,
2178309U,
3524578U,
5702887U,
9227465U,
14930352U,
24157817U,
39088169U,
63245986U,
102334155U,
165580141U,
267914296U,
433494437U,
701408733U,
1134903170U,
1836311903U,
2971215073U,
4807526976U,
7778742049U,
12586269025U,
20365011074U,
32951280099U,
53316291173U,
86267571272U,
139583862445U,
225851433717U,
365435296162U,
591286729879U,
956722026041U,
1548008755920U,
2504730781961U,
4052739537881U,
6557470319842U,
10610209857723U,
17167680177565U,
27777890035288U,
44945570212853U,
72723460248141U,
117669030460994U,
190392490709135U,
308061521170129U,
498454011879264U,
806515533049393U,
1304969544928657U,
2111485077978050U,
3416454622906707U,
5527939700884757U,
8944394323791464U,
14472334024676221U,
23416728348467685U,
37889062373143906U,
61305790721611591U,
99194853094755497U,
160500643816367088U,
259695496911122585U,
420196140727489673U,
679891637638612258U,
1100087778366101931U,
1779979416004714189U,
2880067194370816120U,
4660046610375530309U,
7540113804746346429U,
12200160415121876738U,
1293530146158671551U,
13493690561280548289U,
14787220707439219840U,
9834167195010216513U,
6174643828739884737U,
16008811023750101250U,
3736710778780434371U,
1298777728820984005U,
5035488507601418376U,
6334266236422402381U,
11369754744023820757U,
17704020980446223138U,
10627031650760492279U,
9884308557497163801U,
2064596134548104464U,
11948904692045268265U,
14013500826593372729U,
7515661444929089378U,
3082418197812910491U,
10598079642741999869U,
13680497840554910360U,
5831833409587358613U,
1065587176432717357U,
6897420586020075970U,
7963007762452793327U,
14860428348472869297U,
4376692037216111008U,
790376311979428689U,
5167068349195539697U,
5957444661174968386U,
11124513010370508083U,
17081957671545476469U,
9759726608206432936U,
8394940206042357789U,
18154666814248790725U,
8102862946581596898U,
7810785687120836007U,
15913648633702432905U,
5277690247113717296U,
2744594807106598585U,
8022285054220315881U,
10766879861326914466U,
342420841837678731U,
11109300703164593197U,
11451721545002271928U,
4114278174457313509U,
15565999719459585437U,
1233533820207347330U,
16799533539666932767U,
18033067359874280097U,
16385856825831661248U,
15972180111996389729U,
13911292864118499361U,
11436728902405337474U,
6901277692814285219U,
18338006595219622693U,
6792540214324356296U,
6683802735834427373U,
13476342950158783669U,
1713401612283659426U,
15189744562442443095U,
16903146174726102521U,
13646146663458994000U,
12102548764475544905U,
7301951354224987289U,
957756044990980578U,
8259707399215967867U,
9217463444206948445U,
17477170843422916312U,
8247890213920313141U,
7278316983633677837U,
15526207197553990978U,
4357780107478117199U,
1437243231322556561U,
5795023338800673760U,
7232266570123230321U,
13027289908923904081U,
1812812405337582786U,
14840102314261486867U,
16652914719599069653U,
13046272960151004904U,
11252443606040522941U,
5851972492481976229U,
17104416098522499170U,
4509644517294923783U,
3167316542107871337U,
7676961059402795120U,
10844277601510666457U,
74494587203909961U,
10918772188714576418U,
10993266775918486379U,
3465294890923511181U,
14458561666841997560U,
17923856557765508741U,
13935674150897954685U,
13412786634953911810U,
8901716712142314879U,
3867759273386675073U,
12769475985528989952U,
16637235258915665025U,
10959967170735103361U,
9150458355941216770U,
1663681452966768515U,
10814139808907985285U,
12477821261874753800U,
4845216997073187469U,
17323038258947941269U,
3721511182311577122U,
2597805367549966775U,
6319316549861543897U,
8917121917411510672U,
15236438467273054569U,
5706816310975013625U,
2496510704538516578U,
8203327015513530203U,
10699837720052046781U,
456420661856025368U,
11156258381908072149U,
11612679043764097517U,
4322193351962618050U,
15934872395726715567U,
1810321673979782001U,
17745194069706497568U,
1108771669976727953U,
407221665973673905U,
1515993335950401858U,
1923215001924075763U,
3439208337874477621U,
5362423339798553384U,
8801631677673031005U,
14164055017471584389U,
4518942621435063778U,
236253565197096551U,
4755196186632160329U,
4991449751829256880U,
9746645938461417209U,
14738095690290674089U,
6037997555042539682U,
2329349171623662155U,
8367346726666201837U,
10696695898289863992U,
617298551246514213U,
11313994449536378205U,
11931293000782892418U,
4798543376609719007U,
16729836377392611425U,
3081635680292778816U,
1364727983975838625U,
4446363664268617441U,
5811091648244456066U,
10257455312513073507U,
16068546960757529573U,
7879258199561051464U,
5501061086609029421U,
13380319286170080885U,
434636299069558690U,
13814955585239639575U,
14249591884309198265U,
9617803395839286224U,
5420651206438932873U,
15038454602278219097U,
2012361735007600354U,
17050816337285819451U,
616433998583868189U,
17667250335869687640U,
18283684334453555829U,
17504190596613691853U,
17341130857357696066U,
16398577380261836303U,
15292964163909980753U,
13244797470462265440U,
10091017560662694577U,
4889070957415408401U,
14980088518078102978U,
1422415401783959763U,
16402503919862062741U,
17824919321646022504U,
15780679167798533629U,
15158854415735004517U,
12492789509823986530U,
9204899851849439431U,
3250945287963874345U,
12455845139813313776U,
15706790427777188121U,
9715891493880950281U,
6975937847948586786U,
16691829341829537067U,
5221023116068572237U,
3466108384188557688U,
8687131500257129925U,
12153239884445687613U,
2393627310993265922U,
14546867195438953535U,
16940494506432219457U,
13040617628161621376U,
11534368060884289217U,
6128241615336358977U,
17662609676220648194U,
5344107217847455555U,
4559972820358552133U,
9904080038206007688U,
14464052858564559821U,
5921388823061015893U,
1938697607916024098U,
7860086430977039991U,
9798784038893064089U
};
